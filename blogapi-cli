#!/usr/bin/env php
<?php

/**
 * Auto-generated CLI client for API
 * Generated by Universal CLI API Generator
 */

// Check if running from command line
if (php_sapi_name() !== 'cli') {
    die('This script can only be run from the command line.' . PHP_EOL);
}

// Simple HTTP client class
class SimpleHttpClient
{
    private array $headers = [];
    private string $baseUrl;

    public function __construct(string $baseUrl)
    {
        $this->baseUrl = rtrim($baseUrl, '/');
    }

    public function setHeader(string $name, string $value): void
    {
        $this->headers[$name] = $value;
    }

    public function request(string $method, string $path, array $params = []): array
    {
        $url = $this->baseUrl . $path;
        
        // Handle query parameters for GET requests
        if ($method === 'GET' && !empty($params)) {
            $url .= '?' . http_build_query($params);
            $params = [];
        }

        $context = [
            'http' => [
                'method' => $method,
                'header' => $this->buildHeaders(),
                'content' => !empty($params) ? json_encode($params) : '',
                'ignore_errors' => true
            ]
        ];

        $response = file_get_contents($url, false, stream_context_create($context));
        
        if ($response === false) {
            throw new RuntimeException("Failed to make request to $url");
        }

        $decoded = json_decode($response, true);
        return $decoded ?? ['raw' => $response];
    }

    private function buildHeaders(): string
    {
        $headerStrings = [];
        foreach ($this->headers as $name => $value) {
            $headerStrings[] = "$name: $value";
        }
        
        if (!isset($this->headers['Content-Type'])) {
            $headerStrings[] = 'Content-Type: application/json';
        }
        
        return implode("\r\n", $headerStrings);
    }
}

// Configuration
const BASE_URL = 'https://api.blog.com/v1';
const API_NAME = 'BlogAPI';

function addAuth(SimpleHttpClient $client): void
{
    $token = getenv('API_TOKEN');
    if (!$token) {
        fwrite(STDERR, "Error: API_TOKEN environment variable required\n");
        exit(1);
    }
    $client->setHeader('Authorization', 'Bearer ' . $token);
}

function createClient(): SimpleHttpClient
{
    $client = new SimpleHttpClient(BASE_URL);
    addAuth($client);
    return $client;
}

function formatOutput(array $data, string $format = 'json'): string
{
    switch ($format) {
        case 'table':
            return formatAsTable($data);
        case 'csv':
            return formatAsCsv($data);
        case 'json':
        default:
            return json_encode($data, JSON_PRETTY_PRINT);
    }
}

function formatAsTable(array $data): string
{
    if (empty($data)) return "No data\n";
    
    // Simple table formatting
    if (isset($data[0]) && is_array($data[0])) {
        $headers = array_keys($data[0]);
        $output = implode("\t", $headers) . "\n";
        $output .= str_repeat("-", strlen($output)) . "\n";
        
        foreach ($data as $row) {
            $values = [];
            foreach ($headers as $header) {
                $values[] = $row[$header] ?? '';
            }
            $output .= implode("\t", $values) . "\n";
        }
        return $output;
    }
    
    return json_encode($data, JSON_PRETTY_PRINT);
}

function formatAsCsv(array $data): string
{
    if (empty($data)) return "";
    
    $output = fopen('php://temp', 'r+');
    
    if (isset($data[0]) && is_array($data[0])) {
        fputcsv($output, array_keys($data[0]));
        foreach ($data as $row) {
            fputcsv($output, $row);
        }
    }
    
    rewind($output);
    $csv = stream_get_contents($output);
    fclose($output);
    
    return $csv;
}

// Generated Commands

function cmd_users_get(array $args): void
{
    $params = parseArgs($args);
    $client = createClient();
    
    try {
        // Replace path parameters
        $path = '/users';
        foreach ($params as $key => $value) {
            $path = str_replace('{' . $key . '}', $value, $path);
        }
        
        $response = $client->request('GET', $path, $params);
        $format = $params['format'] ?? 'json';
        echo formatOutput($response, $format);
    } catch (Exception $e) {
        fwrite(STDERR, "Error: " . $e->getMessage() . "\n");
        exit(1);
    }
}

function cmd_users_create(array $args): void
{
    $params = parseArgs($args);
    $client = createClient();
    
    try {
        // Replace path parameters
        $path = '/users';
        foreach ($params as $key => $value) {
            $path = str_replace('{' . $key . '}', $value, $path);
        }
        
        $response = $client->request('POST', $path, $params);
        $format = $params['format'] ?? 'json';
        echo formatOutput($response, $format);
    } catch (Exception $e) {
        fwrite(STDERR, "Error: " . $e->getMessage() . "\n");
        exit(1);
    }
}

function cmd_users_id_get(array $args): void
{
    $params = parseArgs($args);
    $client = createClient();
    
    try {
        // Replace path parameters
        $path = '/users/{id}';
        foreach ($params as $key => $value) {
            $path = str_replace('{' . $key . '}', $value, $path);
        }
        
        $response = $client->request('GET', $path, $params);
        $format = $params['format'] ?? 'json';
        echo formatOutput($response, $format);
    } catch (Exception $e) {
        fwrite(STDERR, "Error: " . $e->getMessage() . "\n");
        exit(1);
    }
}

function cmd_posts_get(array $args): void
{
    $params = parseArgs($args);
    $client = createClient();
    
    try {
        // Replace path parameters
        $path = '/posts';
        foreach ($params as $key => $value) {
            $path = str_replace('{' . $key . '}', $value, $path);
        }
        
        $response = $client->request('GET', $path, $params);
        $format = $params['format'] ?? 'json';
        echo formatOutput($response, $format);
    } catch (Exception $e) {
        fwrite(STDERR, "Error: " . $e->getMessage() . "\n");
        exit(1);
    }
}

function cmd_posts_create(array $args): void
{
    $params = parseArgs($args);
    $client = createClient();
    
    try {
        // Replace path parameters
        $path = '/posts';
        foreach ($params as $key => $value) {
            $path = str_replace('{' . $key . '}', $value, $path);
        }
        
        $response = $client->request('POST', $path, $params);
        $format = $params['format'] ?? 'json';
        echo formatOutput($response, $format);
    } catch (Exception $e) {
        fwrite(STDERR, "Error: " . $e->getMessage() . "\n");
        exit(1);
    }
}

function parseArgs(array $args): array
{
    $params = [];
    $i = 0;
    
    while ($i < count($args)) {
        $arg = $args[$i];
        
        if (strpos($arg, '--') === 0) {
            $key = substr($arg, 2);
            $value = $args[$i + 1] ?? '';
            $params[$key] = $value;
            $i += 2;
        } else {
            $i++;
        }
    }
    
    return $params;
}

function printUsage(): void
{
    echo "Usage: " . basename($_SERVER['argv'][0]) . " <command> [options]\n";
    echo "\nAvailable commands:\n";
    echo "  users:get - List all users\n";
    echo "  users:create - Create new user\n";
    echo "  users:id:get - Get user by ID\n";
    echo "  posts:get - List posts\n";
    echo "  posts:create - Create new post\n";

    echo "\nGlobal options:\n";
    echo "  --format <json|table|csv>  Output format (default: json)\n";
    echo "\nEnvironment variables:\n";
    echo "  API_TOKEN  Bearer token for authentication\n";
    echo "  API_KEY    API key for authentication\n";
}

// Main execution
if ($argc < 2) {
    printUsage();
    exit(1);
}

$command = $argv[1];

switch ($command) {
    case 'help':
    case '--help':
    case '-h':
        printUsage();
        break;
        case 'users:get':
            cmd_users_get(array_slice($argv, 2));
            break;
        case 'users:create':
            cmd_users_create(array_slice($argv, 2));
            break;
        case 'users:id:get':
            cmd_users_id_get(array_slice($argv, 2));
            break;
        case 'posts:get':
            cmd_posts_get(array_slice($argv, 2));
            break;
        case 'posts:create':
            cmd_posts_create(array_slice($argv, 2));
            break;

    default:
        echo "Unknown command: $command\n\n";
        printUsage();
        exit(1);
}
